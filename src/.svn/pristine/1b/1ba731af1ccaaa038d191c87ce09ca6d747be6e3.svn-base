<template>
  <div id="dataImport">
    <!--折叠面板1--选择分组-->
    <el-collapse v-model="activeNames" accordion>
      <el-collapse-item name="1">
        <template
          slot="title"
          style="background-color:rgba(232, 232, 232, 1) ,border:1px solid,margin-left:10px">
          <i class="iconfont icontubiaozhizuo-"></i> 选择分组
        </template>
        <!--项目编号 -->
        <div class="search">
          <div class="left">
            <span>创建人 ：</span>
            <el-select placeholder="请选择" size="small" v-model="groupname" @change="creator" clearable>
              <el-option v-for="(item,index) in this.nameList" :key="index" :value="item" ></el-option> 
            </el-select>
          </div>

          <div class="right">
            <el-input v-model.trim="searchname" placeholder="搜索" size="small" class="input-with-select"  @keyup.enter.native="search()">
              <el-button slot="append" class="iconfont iconsousuo" size="small" @click="search()"></el-button>
            </el-input>
          </div>

          <div class="storageList">
            <div class="list" style="width:96%">
              <el-table
                :data="datalist"              
                style="width: 100%"
                border              
                :row-class-name="tableRowClassName"
	              :row-style="selectedstyle"
                :header-cell-style="{color:'#333333'}"  @current-change="handleSelectionChange">
                <el-table-column prop="id" label="项目编号"></el-table-column>
                <el-table-column prop="group_name" label="项目名称"></el-table-column>           
                <el-table-column prop="group_time" label="创建时间"></el-table-column>
                <el-table-column prop="group_username" label="创建人"></el-table-column>
                <el-table-column fixed="right" label="操作">
                  <template slot-scope="scope">
                    <el-button type="text" size="small" @click="daoChu(scope.row)">
                      <span>脱敏导出</span>
                    </el-button>
                    <el-button type="text" size="small" @click="jieshi = true">
                      <i class="iconfont iconwenhao"></i>
                    </el-button>
                    <el-button type="text" size="small" @click.stop="del(scope.row)">
                      <span>删除</span>
                    </el-button>
                  </template>
                </el-table-column>
              </el-table>
            </div>
            <el-pagination
              style="margin-left:35%"
              @size-change="handleSizeChange1"
              @current-change="handleCurrentChange1"
              :current-page="shuInfo.page"
              :page-sizes="[10]"
              :page-size="shuInfo.pagerows"
              layout="total, sizes, prev, pager, next, jumper"
              :total="shuInfo.count"
            ></el-pagination>
          </div>
        </div>
      </el-collapse-item>
    </el-collapse>

    <!--折叠面板2--创建者-->
    <el-collapse v-model="activeNames" style="margin-top:20px" v-if="chuangjian">
      <el-collapse-item name="2">
        <template
          slot="title"
          style="background-color:rgba(232, 232, 232, 1) ,border:1px solid,margin-left:10px">
          <!-- <i class="iconfont icontubiaozhizuo-"></i>-->
        </template>

        <!--全部创建者的数据 -->
        <div class="down">
          <el-table :data="tablelist" tooltip-effect="dark" style="width: 100%" border stripe  highlight-current-row>
            <el-table-column prop="test_id" label="病理号" sortable></el-table-column>
            <el-table-column prop="name" label="姓名" sortable></el-table-column>
            <el-table-column prop="diagnosis2" label="病理亚型" sortable></el-table-column>
            <el-table-column prop="sex" label="性别" sortable></el-table-column>
            <el-table-column prop="age" label="年龄" sortable></el-table-column>
            <el-table-column
              prop="report_date"
              label="报告时间"
              show-overflow-tooltip
              width="190"
              sortable
            ></el-table-column>
            <el-table-column fixed="right" label="操作">
              <template slot-scope="scope">
                <el-button type="text" size="small" @click="look(scope.row)">
                  <span>查看</span>
                </el-button>
                <el-button type="text" size="small" @click="dele(scope.row)">
                  <span>删除</span>
                </el-button>
              </template>
            </el-table-column>
          </el-table>
          <!--    :current-page="count"                      当前显示的页数
                  :page-sizes="[10]"                        切换每页显示的条数
                  :page-size="pagerows"                    当前每页显示的条数
                  @size-change="handleSizeChange"           点击切换每页显示多少条
                  @current-change="handleCurrentChange"     页码值发生了切换
                  :total="count"                            共多少条           
                  layout="total, sizes, prev, pager, next, jumper"
          -->
          <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="queryInfo.page"
            :page-sizes="[10]"
            :page-size="queryInfo.pagerows"
            layout="total, sizes, prev, pager, next, jumper"
            :total="queryInfo.count"
          ></el-pagination>
        </div>
      </el-collapse-item>
    </el-collapse>

    <!--脱敏导出解释-->
    <div class="TUO" v-if="jieshi">
      <div class="tuoD">
        <div class="DTitle">
          <span>脱敏导出</span>
        </div>
        <div class="DMain">
          <span>原始值（待脱敏数据）：13312341234</span>
          <span>脱敏结果（脱敏后的数据显示）：as2nh6hji1hui4hasd0w</span>
          <span style="color:rgba(153,153,153,1);">使用Hash函数对敏感数据进行脱敏，不支持逆运算。</span>
        </div>
        <div class="DFoot">
          <span @click="jieshi = false">我知道了</span>
        </div>
      </div>
    </div>

    <!--脱敏导出-->
    <div class="DAO" v-if="daochu">
      <div class="DC">
        <div class="DCTitle">
          <span>脱敏导出</span>
          <span @click="daochu = false">
            <i class="iconfont iconx"></i>
          </span>
        </div>
        <div class="DCMain">
          <div class="storageList">
            <el-table :data="minList" highlight-current-row border stripe max-height="270">
              <el-table-column prop="id" label="编号"></el-table-column>
              <el-table-column prop="patient_id" label="病人ID" width="100"></el-table-column>
              <el-table-column prop="test_id" label="病理号" width="100"></el-table-column>
              <el-table-column prop="name" label="姓名" width="100"></el-table-column>
              <el-table-column prop="cardid" label="导出ID" width="100"></el-table-column>
              <el-table-column prop="sex" label="性别" width="100"></el-table-column>
            </el-table>
          </div>
          <div class="btns">
            <el-button @click="daochu =false">取消</el-button>
            <el-button @click="sure()">确认导出</el-button>
          </div>
        </div>
      </div>
    </div>

    <!-- 查看列表单个信息-->
    <div class="zhezhao" v-if="zhezhao">
      <div class="look">
        <div class="header">
          <span>查看病理信息</span>
          <span @click="zhezhao = false">
            <i class="iconfont iconx"></i>
          </span>
        </div>

        <div class="content">
          <div class="HZ">
            <button>患者及报告信息</button>
            <div>
              <span>病人ID(住院号/门诊号) ：</span>
              {{editForm.patient_id}}
            </div>
            <div>
              <span>姓名：</span>
              {{editForm.name}}
            </div>
            <div>
              <span>性别：</span>
              {{editForm.sex}}
            </div>
            <div>
              <span>出生日期：</span>
              {{editForm.birthday}}
            </div>
            <div>
              <span>联系电话：</span>
              {{editForm.phone}}
            </div>
            <div>
              <span>民族：</span>
              {{editForm.nation}}
            </div>
            <div>
              <span>籍贯：</span>
              {{editForm.birthplace}}
            </div>
            <div>
              <span>居住地：</span>
              {{editForm.address_prov}}
            </div>
            <div>
              <span>病理号：</span>
              {{editForm.patient_id}}
            </div>
            <div>
              <span>送检科室：</span>
              {{editForm.department}}
            </div>
            <div>
              <span>申请日期：</span>
              {{editForm.application_date}}
            </div>
            <div>
              <span>报告日期：</span>
              {{editForm.report_date}}
            </div>
            <div>
              <span>就诊类型：</span>
              {{editForm.diagnosis_type}}
            </div>
          </div>
          <div class="BDW">
            <button>本单位原文</button>
            <span>{{editForm.diagnosis_txt}}</span>
          </div>
          <div class="ZD">
            <button>本单位诊断信息</button>
            <div >
              取材部位：
              {{editForm.sample_location}}
            </div>
            <div >
              标本类型：
              {{editForm.sample_type}}
            </div>
            <div>
              淋巴细胞来源：
              {{editForm.type}}
            </div>
            <div>
              诊断结论
              <span>病理类型：</span>
              {{editForm.diagnosis2}}
            </div>
            
            <div style="float:left"  class="fz">辅助诊断
              <div class="mianyi">
                <span>免疫组化：</span>
                <th  v-for="(item,index) in this.helper_diagnosis.ihc" :key="index" :value="item">
                  <td>{{item.mark}}</td>
                  <td>{{item.value}}</td>
                </th>
              </div>

              <div class="mianyi">
                <span>荧光原位杂交：</span>
                <th  v-for="(item,index) in this.helper_diagnosis.fish" :key="index" :value="item">
                  <td>{{item.mark}}</td>
                  <td>{{item.value}}</td>
                </th>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script type="text/ecmascript-6">
export default {
  data() {
    return {
      nameList:[],
      queryInfo: {
        page: 1, //页数
        pagerows: 10, //每页显示的条数
        count: 0 //数据总数
      },
      searchname:'',   //模糊搜索
      getIndex:"",
      peopleList:[],   //创建人数组
      groupname:'',   //创建人
      row:'',    //缓存的row
      group_id: "",
      chuangjian: false,
      minList: [], //脱敏列表
      // 脱敏导出解释
      jieshi: false,
      // 脱敏导出
      daochu: false,
      // 分页器
      queryInfo: {
        page: 1, //页数
        pagerows: 10, //每页显示的条数
        count: 0 //数据总数
      },
      // 分组分页器
      shuInfo: {
        page: 1, //页数
        pagerows: 5, //每页显示的条数
        count: 0 //数据总数
      },
      activeNames: ["1", "2"],
      datalist: [], //数据集数组
      tablelist: [], //病理号数组
      zhezhao: false,
      // 查询到的用户信息对象
      editForm: {},
      helper_diagnosis:[],
     
    };
  },
  created() {
    this.getDataList();
  },
  methods: {
    // 搜索模糊
    async search(){
      let group_name
      const res = await this.axios.get('group/list.php',{params:{group_name:this.searchname}}).then( res => {
        console.log(res)
        this.datalist = res.data.data;
        this.shuInfo.page = parseInt(res.data.page);
        this.shuInfo.count = parseInt(res.data.count); //总条数
        this.shuInfo.pagerows = res.data.pagerows; //每页显示多少条
        console.log(this.shuInfo.count)
      })
    },
    selectedstyle ({row, rowIndex}) {
      if ((this.getIndex) === rowIndex ) {
        return {
        "background-color": "#E7F5FF"
        };
      }
    },
    tableRowClassName ({row, rowIndex}) {
      row.index = rowIndex;
    },
    // 点击；列表行
    handleSelectionChange(row) {
      if (row) {
        this.getIndex = row.index
        this.chuangjian = true;
        this.row = row
         // console.log(row);
        let group_id = "";
        // console.log(this.queryInfo.page)
        const { data: res } = this.axios
          .get("report/list.php", { params: { group_id: row.id,page:this.queryInfo.page} })
          .then(res => {
            // console.log(res);
            this.tablelist = res.data.data;
            this.queryInfo.page = parseInt(res.data.page);
            this.queryInfo.count = parseInt(res.data.count); //总条数
          });
      }
          
    },

    // 确认导出
    async sure() {                 
      // console.log(this.row.id);
      // let z = "";
      // window.open('group_report/list.php?&z=1' +'&group_id=' +this.row.id)
      // // const res = await this.axios.get("group_report/list.php", {
      // //   params: { group_id: this.id, z: 1 }
      // // }); 
      // console.log(res);    

      // this.axios.get('group_report/list.php?&z=1' +'&group_id=' +this.row.id, { //url: 接口地址
      //   responseType: `arraybuffer` //一定要写
        
      // })
      // .then(res => {
      //   if(res.status == 200){
      //     let blob = new Blob([res.data], {
      //       type: `application/xlsx` //word文档为msword,pdf文档为pdf          
      //     });
      //     let objectUrl = URL.createObjectURL(blob);
      //     let link = document.createElement("a");
      //     let fname = `我的文档`; //下载文件的名字
      //     link.href = objectUrl;
      //     link.setAttribute("download", fname);
      //     document.body.appendChild(link);
      //     link.click();
      //   }else {
      //     this.$message({
      //     type: "error",
      //     message: "导出失败"
      //     })
      //   }
      // })

      this.btnSendTem = true
      // 加载loading
      this.loading = true
      this.loadingText = '正在导出模板...'
     this.axios.get('group_report/list.php?z=1' +'&group_id=' +this.row.id, { //url: 接口地址
        responseType: `arraybuffer` //一定要写
      }).then((res) => {
        // 关闭loading
        this.loading = false
        console.log(res)
        // 此处有个坑。这里用content保存文件流，最初是content=res，但下载的test.xls里的内容如下图1，
        // 检查了下才发现，后端对文件流做了一层封装，所以将content指向res.data即可
        // 另外，流的转储属于浅拷贝，所以此处的content转储仅仅是便于理解，并没有实际作用=_=
        const content = res.data
        const blob = new Blob([content]) // 构造一个blob对象来处理数据
        const fileName = '志诺维思.json' // 导出文件名
        // 对于<a>标签，只有 Firefox 和 Chrome（内核） 支持 download 属性
        // IE10以上支持blob但是依然不支持download
        if ('download' in document.createElement('a')) { // 支持a标签download的浏览器
          const link = document.createElement('a') // 创建a标签
          link.download = fileName // a标签添加属性
          link.style.display = 'none'
          link.href = URL.createObjectURL(blob)
          document.body.appendChild(link)
          link.click() // 执行下载
          URL.revokeObjectURL(link.href) // 释放url
          document.body.removeChild(link) // 释放标签
        } else { // 其他浏览器
          navigator.msSaveBlob(blob, fileName)
        }
        this.btnSendTem = false
      }).catch((error) => {
        console.log(error)
        // 关闭loading
        this.loading = false
        this.btnSendTem = false
      })
    },
    // 点击导出
    async daoChu(row) {
      console.log(row.id);
      this.daochu = true;
      const  res  = await this.axios.get("group_report/list.php", {
        params: { group_id: row.id }
      });
      this.id = row.id;
      console.log(this.id);
      this.minList = res.data.data;
      console.log(this.minList)
    },
    // 点击病理号查看
    async look(row) {
      this.zhezhao = true; //不能没
      const { data: res } = await this.axios.get("report/onedata.php", {
        params: { id: row.id }
      });
      this.editForm = res.data;
      if (this.editForm.report_date === "0000-00-00") {
        // console.log(44);
        this.editForm.report_date = "";
      }
      if (this.editForm.application_date === "0000-00-00") {
        // console.log(44);
        this.editForm.application_date = "";
      }
      if (this.editForm.birthday === "0000-00-00") {
        // console.log(4);
        this.editForm.birthday = "";
      }
      this.id = row.id;
      this.helper_diagnosis = this.editForm.helper_diagnosis
      // this.editForm = Object.assign(res.data[0],res.data[1],res.data[2])
      // 表单对象
      console.log(this.editForm);
    },
    // 分组删除
    del(row) {   
      this.$confirm("确定删除该数据？是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
        center: true
      })
        .then(async () => {
          const { data: res } = await this.axios.get("group/del.php", {
            params: { id: row.id }
          });
          console.log(res);
          this.getDataList();
          this.groupname = ''
          this.$message({
            type: "success",
            message: "删除成功!"          
          });        
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消删除"
          });
        });
    },
    // 点击创建人搜索列表
    creator(){
      console.log(this.groupname)
      const res = this.axios.get('group/list.php',{params:{group_username:this.groupname}}).then( res => {
        console.log(res.data)
        this.datalist = res.data.data;
        this.shuInfo.page = parseInt(res.data.page);
        this.shuInfo.count = parseInt(res.data.count); //总条数
        this.shuInfo.pagerows = res.data.pagerows; //每页显示多少条
        console.log(this.shuInfo.count)
      })
    },  
    // 获取分组列表
    async getDataList() {
      const { data: res } = await this.axios.get("group/list.php",{params:{page:this.shuInfo.page}});
      this.datalist = res.data;
      this.peopleList = this.datalist 
       this.peopleList.map( (item,index) =>{
        this.nameList.push(item.group_username)
      })
      this.nameList = [...new Set(this.nameList)]
      this.shuInfo.page = parseInt(res.page);
      this.shuInfo.count = parseInt(res.count); //总条数
      this.shuInfo.pagerows = res.pagerows; //每页显示多少条
      console.log(res);
    },
    // 切换每页显示多少条
    handleSizeChange(newSize) {
      this.queryInfo.pagerows = newSize;
      this.handleSelectionChange(this.row);
    },
    // 点击页数
    handleCurrentChange(newPage) {
      this.queryInfo.page = newPage;
      this.handleSelectionChange(this.row);
    },
    // 数据集切换每页显示多少条
    handleSizeChange1(newSize) {
      this.shuInfo.pagerows = newSize;
      this.getDataList();
    },
    // 数据集点击页数
    handleCurrentChange1(newPage) {
      this.shuInfo.page = newPage;
      // console.log(this.shuInfo.page)
      this.getDataList()
    },
    // 病理号删除
    async dele(row) {
      let group_id
      const { data: res } = await this.axios.get("report/del.php", {
        params: { id: row.id ,group_id:this.row.id}
      });
      console.log("getTableList", res);
      this.handleSelectionChange(this.row)
    },
    // 点击数据查看
    chakana() {
      const { data: res } = this.axios
        .get("report/list.php", { params: { page: this.queryInfo.page } })
        .then(res => {
          console.log(res);
          this.tablelist = res.data.data;
          this.queryInfo.page = parseInt(res.data.page);
          this.queryInfo.count = parseInt(res.data.count); //总条数
          console.log(this.queryInfo.page);
          console.log(this.queryInfo.count);
          console.log(this.queryInfo.pagerows);
        });
    },
    // 新增患者信息
    async addFormList(id, editForm) {
      this.zhezhao = !this.zhezhao;
      this.id = this.id;
      console.log(this.id);
      // const sicksList = JSON.stringify(sicksArr)
      let data = {
        id: this.id,
        data: editForm
      };
      // 判断提交
      if (data) {
        await this.axios.post("report/add.php", data).then(res => {
          console.log("res:", res);
          var result = res.data; //JSON.parse(res.body);
          if (result.result == "done") {
            this.$alert("提交成功", "提交结果", {
              confirmButtonText: "确定",
              type: "success",
              callback: action => {}
            });
          } else {
            this.$alert("提交失败", "提交结果", {
              confirmButtonText: "确定",
              type: "warning",
              callback: action => {}
            });
          }
        });
      } else {
        console.log("error submit!!");
        return false;
      }
    }
  }
};
</script>

<style scoped lang="stylus" rel="stylesheet/stylus" >
@import 'group.styl'
</style>

